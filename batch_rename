#!/bin/bash


border="================================================="
thin_border="------------------------------------------------"


# ============================================
# Information about the script

help(){


	script_name="./$(eval basename "$0")"

	echo -e "\nRenames ALL files in the current directory."
	echo -e "$border\n"

	echo -e " Usage: $script_name [new_name] \n"
	echo -e " Example: $script_name my_file | Result: my_file_1.txt"

	echo -e "\n$thin_border\n"
	echo -e " Options: \n"
	echo -e " -n: Shows you the output without altering file names \n\n"

}
# =============================================



#===============================
# runs if there is no argument and
# runs the help function


new_name=$1

# Checks for the first argument
if [ -z $new_name ]

	then

		clear
		echo -e "\n[!] no argument was given \n"

		help
		exit


	elif [ $new_name == "-h" ] || [ $new_name == "help" ]

		then

			clear

			help
			exit
fi




# Prints a message if the directory is empty
if [[ -z $(dir) ]]

	then

		echo -e "\n[!] This directory is empty...\n\n"
		exit

fi




#===========================




# removes whitespace from all files in a directory
rename 's/ //g' *


rename() {

	# Renames every file with a new file name
	# While appending a number to the file name

	let count=1

	for file in $(ls $dir); do

		if [ ! -d "$file" ]; then

			mv $file ${new_name%%.*}_$count.${file##*.}
			let count=count+1

		fi

	done

}



# ================================================

# new variable for no_run function
other_name=$2


# Allows the user to run a test to see
# what the output will look like
# without altering the file names

no_run() {

	let count=1

	for file in $(ls $dir); do

		if [ ! -d $file ]; then

			echo -e "$file \t${other_name%%.*}_$count.${file##*.}"
			let count=count+1

		fi

	done

}

# checks if the -n option is used
if [ $1 == "-n" ]; then

	no_run

else

	rename

fi
